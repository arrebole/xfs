{"version":3,"sources":["components/header/index.tsx","components/header/Header.tsx","components/footer/index.tsx","components/footer/Footer.tsx","views/home/index.tsx","views/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","React","Component","Footer","Home","props","handleChange","info","file","status","console","log","setState","loading","response","code","url","data","alert","UploadButton","type","state","style","fontSize","FsUpload","name","listType","showUploadList","onChange","action","src","alt","width","ResInfo","value","size","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUACeA,G,wLCIP,OACI,4BAAQC,UAAU,UACd,6BACI,2C,GALgBC,IAAMC,YCF3BC,G,wLCIP,OACI,yBAAKH,UAAU,UACX,yBAAKA,UAAU,mBACX,mFACA,oDAAoB,kDAApB,sC,GANgBC,IAAMC,YCF3BE,G,mBCeX,WAAYC,GAAa,IAAD,qCACpB,4CAAMA,KAQVC,aAAe,SAACC,GAEa,cAArBA,EAAKC,KAAKC,OAMW,SAArBF,EAAKC,KAAKC,SACVC,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAAEC,SAAS,IACrBN,EAAKC,KAAKM,SAASC,MAAQ,EAC3B,EAAKH,SAAS,CAAEI,IAAKT,EAAKC,KAAKM,SAASG,KAAKD,MAE7CE,MAAM,6BAXV,EAAKN,SAAS,CAAEC,SAAS,KAZT,EA6BxBM,aAAyB,kBACrB,yBAAKnB,UAAU,iBACb,kBAAC,IAAD,CAAMoB,KAAM,EAAKC,MAAMR,QAAU,UAAY,OAAQS,MAAO,CAAEC,SAAU,MACxE,yBAAKvB,UAAU,mBAAf,YAhCkB,EAoCxBwB,SAAqB,WACjB,OACI,6BAASxB,UAAU,8BACf,kBAAC,IAAD,CACIyB,KAAK,OACLC,SAAS,eACT1B,UAAU,WACV2B,gBAAgB,EAChBC,SAAU,EAAKtB,aACfuB,OAAO,eAEa,KAAnB,EAAKR,MAAML,IAAa,yBAAKc,IAAK,EAAKT,MAAML,IAAKe,IAAI,OAAOT,MAAO,CAAEU,MAAO,UAAe,kBAAC,EAAKb,aAAN,SA/CrF,EAqDxBc,QAAoB,WAEhB,OACI,6BAASjC,UAAU,2BACf,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAOkC,MAAO,EAAKb,MAAML,IAAKmB,KAAK,aAvD/C,EAAKd,MAAQ,CACTR,SAAS,EACTG,IAAK,IALW,E,sEAiEpB,OACI,yBAAKoB,GAAK,QACN,kBAAC,EAAD,MACA,6BAASpC,UAAU,iBACf,uBAAMiC,QAAN,MACA,uBAAMT,SAAN,OAEJ,kBAAC,EAAD,W,GAzEkBvB,IAAMC,YCFzBmC,EARO,WACpB,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCIcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ec364a3b.chunk.js","sourcesContent":["import Header from \"./Header\"\r\nexport default Header","import React from \"react\"\r\nimport \"./Header.scss\"\r\n\r\nexport default class Header extends React.Component {\r\n    render(){\r\n        return (\r\n            <header className=\"header\">\r\n                <nav>\r\n                    <span>GKD</span>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}","import Footer from \"./Footer\"\r\nexport default Footer","import React from \"react\"\r\nimport \"./Footer.scss\"\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <div className=\"footer-contents\">\r\n                    <p>V0.1.0 | 静态文件服务器 </p>\r\n                    <p>Copyright Ⓒ 2019 <strong>futanaicha.net</strong> , LLC. All rights reserved.</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import Home from \"./Home\"\r\nexport default Home","import React from \"react\"\r\nimport { Upload,Input, Icon } from 'antd';\r\n\r\nimport Header from \"../../components/header\"\r\nimport Footer from \"../../components/footer\"\r\nimport \"./Home.scss\"\r\n\r\n\r\nexport interface Props {}\r\n\r\nexport interface State {\r\n    loading: boolean\r\n    url: string\r\n}\r\n\r\nexport default class Home extends React.Component<Props, State> {\r\n    constructor(props:Props){\r\n        super(props)\r\n        \r\n        this.state = { \r\n            loading: false,\r\n            url: \"\" \r\n        };\r\n    }\r\n\r\n    handleChange = (info:any) => {\r\n        // 如果是上传操作，将load改为true\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n\r\n        // 如果上传完成\r\n        if (info.file.status === 'done'){\r\n            console.log(info);\r\n            this.setState({ loading: false });\r\n            if (info.file.response.code >= 0 ){\r\n                this.setState({ url: info.file.response.data.url });\r\n            }else{\r\n                alert(\"上传失败\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    UploadButton: React.FC = ()=> (\r\n        <div className=\"upload-button\">\r\n          <Icon type={this.state.loading ? 'loading' : 'plus'} style={{ fontSize: 24 }}/>\r\n          <div className=\"ant-upload-text\">Upload</div>\r\n        </div>\r\n    );\r\n\r\n    FsUpload: React.FC = ()=>{\r\n        return (\r\n            <section className=\"container upload-container\">\r\n                <Upload\r\n                    name=\"file\"\r\n                    listType=\"picture-card\"\r\n                    className=\"uploader\"\r\n                    showUploadList={false}\r\n                    onChange={this.handleChange}\r\n                    action=\"/api/upload\"\r\n                >\r\n                    {this.state.url !== \"\" ? <img src={this.state.url} alt=\"file\" style={{ width: '100%' }} /> : <this.UploadButton/>}\r\n                </Upload>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    ResInfo: React.FC = ()=>{\r\n        //if (!this.state.visible) return null\r\n        return (\r\n            <section className=\"container res-container\">\r\n                <div className=\"res-contents\">\r\n                    <Input value={this.state.url} size=\"large\" />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id = \"home\">\r\n                <Header></Header>\r\n                <article className=\"home-contents\">\r\n                    <this.ResInfo></this.ResInfo>\r\n                    <this.FsUpload></this.FsUpload>\r\n                </article>\r\n                <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport \"normalize.css\"\n\nimport Home from \"./views/home\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}