{"version":3,"sources":["components/header/index.tsx","components/header/Header.tsx","components/footer/index.tsx","components/footer/Footer.tsx","components/message/index.tsx","components/message/Message.tsx","components/uploader/index.tsx","components/uploader/Uploader.tsx","views/home/index.tsx","views/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","React","Component","Footer","Message","value","this","props","url","size","Uploader","UploadButton","loading","type","color","height","width","style","fontSize","name","listType","showUploadList","onChange","handleChange","action","src","alt","Home","info","file","status","console","log","setState","response","code","data","alert","state","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXACeA,G,wLCIP,OACI,4BAAQC,UAAU,UACd,6BACI,2C,GALgBC,IAAMC,YCF3BC,G,wLCIP,OACI,yBAAKH,UAAU,UACX,yBAAKA,UAAU,mBACX,mFACA,oDAAoB,8CAApB,sC,GANgBC,IAAMC,Y,SCF3BE,G,wLCSP,OACI,6BAASJ,UAAU,2BACf,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAOK,MAAOC,KAAKC,MAAMC,IAAKC,KAAK,gB,GALlBR,IAAMC,Y,kCCP5BQ,G,kNCWXC,aAAyB,kBACrB,yBAAKX,UAAU,iBAEP,EAAKO,MAAMK,QACP,kBAAC,IAAD,CAAcC,KAAK,OAAOC,MAAM,kBAAkBC,OAAQ,GAAIC,MAAO,KACnE,kBAAC,IAAD,CAAMH,KAAK,OAAOI,MAAO,CAAEC,SAAU,Q,wEAMnD,OACI,6BAASlB,UAAU,8BACf,kBAAC,IAAD,CACImB,KAAK,OACLC,SAAS,eACTpB,UAAU,WACVqB,gBAAgB,EAChBC,SAAUhB,KAAKC,MAAMgB,aACrBC,OAAO,eAEa,KAAnBlB,KAAKC,MAAMC,IAAa,yBAAKiB,IAAKnB,KAAKC,MAAMC,IAAKkB,IAAI,OAAOT,MAAO,CAAED,MAAO,UAAe,uBAAML,aAAN,Y,GAtB3EV,IAAMC,YCV7ByB,G,mBCiBX,WAAYpB,GAAa,IAAD,8BACpB,4CAAMA,KAQVgB,aAAe,SAACK,GAEa,cAArBA,EAAKC,KAAKC,OAMW,SAArBF,EAAKC,KAAKC,SACVC,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAAErB,SAAS,IACrBgB,EAAKC,KAAKK,SAASC,MAAQ,EAC3B,EAAKF,SAAS,CAAEzB,IAAKoB,EAAKC,KAAKK,SAASE,KAAK5B,MAE7C6B,MAAM,6BAXV,EAAKJ,SAAS,CAAErB,SAAS,KAT7B,EAAK0B,MAAQ,CACT1B,SAAS,EACTJ,IAAK,IALW,E,sEA8BpB,OACI,yBAAK+B,GAAK,QACN,kBAAC,EAAD,MAEA,6BAASvC,UAAU,iBACf,kBAAC,EAAD,CAASQ,IAAKF,KAAKgC,MAAM9B,KAAzB,KACA,kBAAC,EAAD,CAAUA,IAAKF,KAAKgC,MAAM9B,IAAKe,aAAcjB,KAAKiB,aAAcX,QAASN,KAAKgC,MAAM1B,WAGxF,kBAAC,EAAD,W,GAxCkBX,IAAMC,YCHzBsC,EARO,WACpB,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCGcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.613ea273.chunk.js","sourcesContent":["import Header from \"./Header\"\r\nexport default Header","import React from \"react\"\r\nimport \"./Header.scss\"\r\n\r\nexport default class Header extends React.Component {\r\n    render(){\r\n        return (\r\n            <header className=\"header\">\r\n                <nav>\r\n                    <span>GKD</span>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}","import Footer from \"./Footer\"\r\nexport default Footer","import React from \"react\"\r\nimport \"./Footer.scss\"\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <div className=\"footer-contents\">\r\n                    <p>V0.1.0 | 静态文件服务器 </p>\r\n                    <p>Copyright Ⓒ 2019 <strong>futanaicha</strong> , LLC. All rights reserved.</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import Message from \"./Message\"\r\nexport default Message","import React from \"react\"\r\nimport { Input } from 'antd';\r\nimport \"./Message.scss\"\r\n\r\nexport interface Props {\r\n    url: string\r\n}\r\n\r\nexport default class Message extends React.Component<Props> {\r\n    render(){\r\n        return (\r\n            <section className=\"container res-container\">\r\n                <div className=\"res-contents\">\r\n                    <Input value={this.props.url} size=\"large\" />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import Uploader from \"./Uploader\"\r\nexport default Uploader;","import React from \"react\"\r\nimport ReactLoading from 'react-loading';\r\nimport { Upload, Icon  } from 'antd';\r\nimport \"./Uploader.scss\"\r\n\r\nexport interface Props {\r\n    loading: boolean\r\n    handleChange:any\r\n    url: string\r\n}\r\n\r\nexport default class Uploader extends React.Component<Props> {\r\n    UploadButton: React.FC = ()=> (\r\n        <div className=\"upload-button\">\r\n            {\r\n                this.props.loading ? \r\n                    <ReactLoading type=\"spin\" color=\"rgb(82, 82, 82)\" height={30} width={30} /> \r\n                    : <Icon type='plus' style={{ fontSize: 24 }}/>\r\n            }\r\n        </div>\r\n    );\r\n\r\n    render(){\r\n        return (\r\n            <section className=\"container upload-container\">\r\n                <Upload\r\n                    name=\"file\"\r\n                    listType=\"picture-card\"\r\n                    className=\"uploader\"\r\n                    showUploadList={false}\r\n                    onChange={this.props.handleChange}\r\n                    action=\"/api/upload\"\r\n                >\r\n                    {this.props.url !== \"\" ? <img src={this.props.url} alt=\"file\" style={{ width: '100%' }} /> : <this.UploadButton/>}\r\n                </Upload>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}","import Home from \"./Home\"\r\nexport default Home","import React from \"react\"\r\n\r\n\r\nimport Header from \"../../components/header\"\r\nimport Footer from \"../../components/footer\"\r\nimport Message from \"../../components/message\"\r\nimport Uploader from \"../../components/uploader\"\r\nimport \"./Home.scss\"\r\n\r\n\r\nexport interface Props {}\r\n\r\nexport interface State {\r\n    loading: boolean\r\n    url: string\r\n}\r\n\r\nexport default class Home extends React.Component<Props, State> {\r\n    constructor(props:Props){\r\n        super(props)\r\n        \r\n        this.state = { \r\n            loading: false,\r\n            url: \"\" \r\n        };\r\n    }\r\n\r\n    handleChange = (info:any) => {\r\n        // 如果是上传操作，将load改为true\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n\r\n        // 如果上传完成\r\n        if (info.file.status === 'done'){\r\n            console.log(info);\r\n            this.setState({ loading: false });\r\n            if (info.file.response.code >= 0 ){\r\n                this.setState({ url: info.file.response.data.url });\r\n            }else{\r\n                alert(\"上传失败\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div id = \"home\">\r\n                <Header></Header>\r\n\r\n                <article className=\"home-contents\">\r\n                    <Message url={this.state.url} > </Message>\r\n                    <Uploader url={this.state.url} handleChange={this.handleChange} loading={this.state.loading}></Uploader>\r\n                </article>\r\n                \r\n                <Footer></Footer>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport \"normalize.css\"\nimport \"./styles/themes.scss\"\n\nimport Home from \"./views/home\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}